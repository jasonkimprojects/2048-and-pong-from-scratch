#BlueJ class context
comment0.params=
comment0.target=GameBoard()
comment0.text=Constructor,\ initializes\ vars\ and\ creates\ a\ copy
comment1.params=
comment1.target=void\ copy()
comment1.text=Copies\ the\ contents\ of\ the\ current\ gameboard\ into\ the\ backup\ and\ copies\ the\ score
comment10.params=
comment10.target=void\ moveLeft()
comment10.text=\n\ Helper\ method\ for\ moving\ left\n
comment11.params=
comment11.target=boolean\ checkLeft()
comment11.text=\n\ @return\ true\ if\ any\ elements\ in\ the\ board\ can\ be\ moved\ left\n\ false\ otherwise\n
comment12.params=
comment12.target=void\ left()
comment12.text=\n\ If\ possible,\ copies\ the\ current\ array\ into\ backup\ before\ modification\n\ and\ shifts\ elements\ to\ the\ left\ and\ adds\ identical\ elements\ up\n
comment13.params=
comment13.target=void\ moveRight()
comment13.text=\n\ Helper\ method\ for\ moving\ right\n
comment14.params=
comment14.target=boolean\ checkRight()
comment14.text=\n\ @return\ true\ if\ any\ elements\ can\ be\ shifted\ right\n\ false\ otherwise\n
comment15.params=
comment15.target=void\ right()
comment15.text=\n\ If\ possible,\ copies\ the\ current\ array\ into\ backup\ before\ modification\n\ and\ shifts\ all\ elements\ to\ the\ right\ and\ adds\ identical\ elements\n
comment16.params=
comment16.target=void\ moveUp()
comment16.text=\n\ Helper\ method\ for\ moving\ up\n
comment17.params=
comment17.target=boolean\ checkUp()
comment17.text=\n\ @return\ true\ if\ at\ least\ one\ element\ can\ be\ moved\ up\n\ false\ otherwise\n
comment18.params=
comment18.target=void\ up()
comment18.text=\n\ If\ possible,\ copies\ the\ array\ into\ backup\ before\ modification\n\ and\ moves\ all\ elements\ up\ and\ adds\ identical\ elements\n
comment19.params=
comment19.target=void\ moveDown()
comment19.text=\n\ Helper\ method\ for\ moving\ down\n
comment2.params=
comment2.target=void\ undo()
comment2.text=Copies\ the\ contents\ of\ the\ back\ up\ gameboard\ and\ the\ score
comment20.params=
comment20.target=boolean\ checkDown()
comment20.text=\n\ @return\ true\ if\ at\ least\ one\ element\ can\ be\ moved\ down\n\ false\ otherwise\n
comment21.params=
comment21.target=void\ down()
comment21.text=\n\ If\ possible,\ copies\ gameboard\ into\ backup\ before\ modification\n\ and\ moves\ all\ elements\ down\ and\ adds\ identical\ elements\n
comment22.params=
comment22.target=java.lang.String\ toString()
comment22.text=\n\ @return\ the\ String\ representation\ of\ the\ gameboard\n
comment23.params=
comment23.target=int[][]\ getGameBoard()
comment23.text=Getter\ method\ for\ 2D\ array
comment24.params=
comment24.target=boolean\ playerWin()
comment24.text=\n\ @return\ true\ if\ at\ least\ one\ tile\ on\ the\ gameboard\ is\ 2048\n\ false\ otherwise\n
comment25.params=
comment25.target=boolean\ playerLose()
comment25.text=\n\ @return\ true\ if\ the\ board\ is\ full\n\ and\ the\ player\ can't\ make\ a\ horizontal\ or\ vertical\ move\n\ false\ otherwise\n
comment26.params=
comment26.target=boolean\ FullBoard()
comment26.text=\n\ @return\ true\ if\ the\ gameboard\ is\ full,\ false\ otherwise\n
comment27.params=
comment27.target=boolean\ horizontalMoveExists()
comment27.text=\n\ @return\ true\ if\ any\ horizontal\ element\ can\ be\ added\ up,\ false\ otherwise\n
comment28.params=
comment28.target=boolean\ verticalMoveExists()
comment28.text=\n\ @return\ true\ if\ any\ vertical\ element\ can\ be\ added\ up,\ false\ otherwise\n
comment3.params=
comment3.target=boolean\ getLeftShifted()
comment3.text=\n\ Getter\ methods\n
comment4.params=
comment4.target=boolean\ getRightShifted()
comment5.params=
comment5.target=boolean\ getUpShifted()
comment6.params=
comment6.target=boolean\ getDownShifted()
comment7.params=
comment7.target=void\ reset()
comment7.text=\n\ Called\ at\ the\ end\ of\ every\ move\ and\ resets\ the\ boolean\ toggles\n
comment8.params=
comment8.target=java.lang.String\ getScore()
comment8.text=Just\ another\ getter\ method
comment9.params=num
comment9.target=void\ randomSpawn(int)
comment9.text=\n\ @param\ the\ number\ of\ random\ values\ spawned\ on\ the\ board\n\ Finds\ an\ empty\ spot\ on\ the\ gameboard\ and\ fills\ it\ in\ with\ a\ 2\n\ If\ there\ are\ no\ empty\ spots,\ this\ method\ does\ nothing\n
numComments=29
